{"version":3,"sourceRoot":"","sources":["../scss/theme/members/_fonts.scss","../scss/01-base/_base.scss","../scss/theme/vendors/_lessier.scss","../scss/theme/members/_mixins.scss","../scss/02-module/_module.scss","../scss/03-layout/_layout-information.scss","../scss/03-layout/_layout-rate.scss","../scss/03-layout/_layout-testimonials.scss","../scss/03-layout/_layout-attribution.scss","../scss/04-state/_state.scss"],"names":[],"mappings":"AAAQ;ACMR;EACI;EC4SI;;;ADxSR;EAEQ;EACA;EEVJ,kBACQ;EFgBJ;EACA;EACA;;ACmQJ;ED/QJ;IEPI,kBACQ;;;;AFsBZ;EAEI;EACA;;ACuRI;EAEW;;;AElTnB;EACI;EACA;EACA;EACA;;AFiRA;EErRJ;IAMQ;IACA;;;AF8QJ;EErRJ;IFuCI;IAEI;IAsCA,YErEyE;IACzE;IACA;;;AFyQJ;EErRJ;IFuCI;IAMI,uBE9B8B;IF4D9B,KE5D6C;;;;ACdrD;EACI;;AHmRA;EGpRJ;IHmGI;IAII,gBGpGgC;IAChC;;;AAMI;EACI,cAFQ;EAGR;EACA;;AHuQZ;EG1QQ;IAMQ,cADY;IAEZ;;;AHmQhB;EG1QQ;IAUQ;IACA;IACA;;;AAIR;EACI,cAZgB;EAcZ;EACA;EAEJ;;AHoPZ;EG1PQ;IASQ,cADY;;;AHkP5B;EG1PQ;IAYQ;IACA;;;;ACvCpB;EACI;EACA;;AJkRA;EIpRJ;IAIQ;;;AAKI;EACI;EACA;EACA;EACA;EACA;;AJsQZ;EIpQgB;IAAiB;;EAEjB;IAAiB;;;AJkQjC;EI3QQ;IJ0FR;II7EgB;;;AAIR;EACI;EACA;;AJwPZ;EI1PQ;IAIQ;IACA;;;AAIR;EACI;EACA;;AJ+OZ;EIjPQ;IAIQ;;;;AAKZ;EACI;EACA;EACA;;AJqOR;EIxOI;IAKQ;IACA;;;AAGJ;EJ8CR;EASkB,iBItDiC;EJwDnC,aIxD6D;EACjE;;AAGJ;EACI;EACA;;;AJwNZ;EKpRJ;ILmGI;IAMI,WKvGiC;;;ALkRrC;EKpRJ;IAKQ;;;AL+QJ;EKpRJ;ILmGI;IASkB,iBKpGyB;ILsG3B,aKtG8C;;;AAKtD;EACI;EACA;EACA;EACA;EACA;;ALkQZ;EKvQQ;IAOQ;IACA;;;AL+PhB;EKvQQ;IAWQ;;;AL4PhB;EKzPY;IAEQ;;;ALuPpB;EKnPY;IAEQ;;;AAKZ;EL2DR;;AKtDY;EACI;EACA;EACA;;;AAWhB;ELwCA;EAII,gBK3CgC;ELgDlB,iBKhDuC;;AAErD;EAAS;;AAKL;EACI;EACA;;AAGJ;EACI;EACA;;;AAKZ;EACI;EACA;EACA;;;AClFR;EACI;EACA;EACA;;AAGI;EACI;;;ACCA;EACI;;AAEA;EAAU;;;APyQtB;EOhQJ;IP+EI;IAMI,WOnFiC;;;AP8PrC;EOhQJ;IAKQ;;;AP2PJ;EOhQJ;IP+EI;IASkB,iBOhFyB;IPkF3B,aOlF8C;;;AAKtD;EACI;;AACA;EACI;EPmLZ;;;AOhKA;EACI;;AAEA;EAAU","file":"app.css","sourcesContent":["@import url('https://fonts.googleapis.com/css2?family=Spartan:wght@400;500;700&display=swap');\r\n\r\n//********************************* \r\n//* FONTS\r\n//*********************************\r\n$ff: (\r\n    'main': 'Spartan'\r\n);","@use '../theme' as thm;\r\n@use 'sass:map';\r\n\r\n//********************************* \r\n//* HTML TAGS \r\n//*********************************\r\nhtml {\r\n    font-size: 62.5%;\r\n    @include thm.less-box();\r\n}\r\n\r\nbody {\r\n    font: {\r\n        family: map.get(thm.$ff, 'main');\r\n        size: 16px;\r\n    }\r\n    @include thm.mx-background();\r\n    @include thm.less-query($device: 'smartphone', $size: 'lg') {\r\n        @include thm.mx-background($device: 'desktop');\r\n    }\r\n    background: {\r\n        repeat: no-repeat;\r\n        position: top left, bottom -1rem right;\r\n        attachment: fixed;\r\n    }\r\n}\r\n\r\n* {\r\n    @include thm.less-box();\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n//********************************* \r\n//* TYPOGRAHPY \r\n//*********************************","////////////////////////// \r\n// *** LESSIER 1.3 *** // \r\n///////////////////////// \r\n\r\n@use 'sass:math';\r\n@use 'sass:map';\r\n@use 'sass:list';\r\n@use 'sass:meta';\r\n@use 'sass:selector';\r\n@use 'sass:string';\r\n@use 'sass:color';\r\n\r\n///////////////////// \r\n// *** MIXINS *** // \r\n////////////////////\r\n\r\n//************************\r\n//* CSS GRID\r\n//************************ \r\n\r\n// *** NOTES *** // \r\n\r\n// *** If you're gonna use both properties \"justify\" and \"align\" then, use the shorthand property \"place\" for writing less code *** // \r\n\r\n// *** If for any reason you put both properties each individually, SASS is gonna stop compilating and it'll tell you that you should use the \"place\" shorthand instead *** //\r\n\r\n@mixin grid\r\n(\r\n    $rows: false, \r\n    $cols: false, \r\n    $flow: false, \r\n    $auto-rows: false, \r\n    $auto-cols: false,  \r\n    $plc-items: false, \r\n    $jt-items: false, \r\n    $al-items: false, \r\n    $plc-content: false,\r\n    $jt-content: false, \r\n    $al-content: false, \r\n    $row-gap: false, \r\n    $col-gap: false,\r\n    $gap: false\r\n) \r\n{\r\n    display: grid;\r\n    @if $rows and $cols {\r\n        grid: $rows / $cols;\r\n    } @else if $rows {\r\n        grid-template-rows: $rows;\r\n    } @else if $cols {\r\n        grid-template-columns: $cols;\r\n    }\r\n\r\n    @if $flow { grid-auto-flow: $flow; }\r\n    \r\n    @if $auto-rows { grid-auto-rows: $auto-rows; }\r\n\r\n    @if $auto-cols { grid-auto-columns: $auto-cols; }\r\n\r\n    @if $plc-items {\r\n        place-items: $plc-items;\r\n    } @else if $jt-items and $al-items {\r\n        @error 'You are trying to use the $jt-items and $al-items arguments individually instead of using the shorthand $plc-items for fewer code';\r\n    } @else if $jt-items {\r\n        justify-items: $jt-items;\r\n    } @else if $al-items {\r\n        align-items: $al-items;\r\n    }\r\n\r\n    @if $plc-content {\r\n        place-content: $plc-content;\r\n    } @else if $jt-content and $al-content {\r\n        @error 'You are trying to use the $jt-content and $al-content arguments individually instead of using the shorthand $plc-content for fewer code';\r\n    } @else if $jt-content {\r\n        justify-content: $jt-content;\r\n    } @else if $al-content {\r\n        align-content: $al-content;\r\n    }\r\n\r\n    @if $gap { \r\n        gap: $gap; \r\n    } @else if $row-gap {\r\n        row-gap: $row-gap;\r\n    } @else if $col-gap {\r\n        column-gap: $col-gap;\r\n    }\r\n}\r\n\r\n//************************\r\n//* CSS FLEXBOX\r\n//************************\r\n\r\n// *** NOTES *** //\r\n\r\n// *** If you use both properties \"flex-direction\" and \"flex-wrap\", SASS will compile it with the shorthand \"flex-flow\" for less code *** // \r\n\r\n@mixin flexbox\r\n(\r\n    $dir: false, \r\n    $wrap: false, \r\n    $jt-content: false, \r\n    $al-items: false,\r\n    $gap: false\r\n)\r\n{\r\n    display: flex;\r\n    @if $dir and $wrap {\r\n        flex-flow: $dir $wrap;\r\n    } @else if $dir {\r\n        flex-direction: $dir;\r\n    } @else if $wrap {\r\n        flex-wrap: $wrap;\r\n    }\r\n\r\n    @if $jt-content { justify-content: $jt-content; }\r\n\r\n    @if $al-items { align-items: $al-items; }\r\n\r\n    @if $gap { gap: $gap; }\r\n}\r\n\r\n//************************\r\n//* PSEUDO-ELEMENT\r\n//************************\r\n\r\n// *** NOTES *** // \r\n\r\n// *** I decided to still use the individual properties as arguments due to that way you can be more specific when calling this mixing (thanks to this, you can identify faster where each value belongs to) *** //\r\n\r\n// *** \"Inset\" has a 81.89% usage in 14.07.21 so I consider useful to use it here instead of putting each property, and that way write less code *** //\r\n\r\n// *** You might use inset only if you give the properly values, e.g. inset: 1rem; or inset: 1rem 2rem;...if you use $inset to give it the four values individually, will be harder to understand where each value belongs to (top, right, bottom, or left), therefore if you have to specify more than 2 values, then you should use the individual arguments instead of using the inset shorthand *** //\r\n\r\n// *** However, if you use the individual arguments, they'll be printed with the shorthand \"inset\" anyways, the difference is that you'll be able to understand in a better way where a value belongs to from the SASS file *** //\r\n\r\n// *** By interpolating the location value you can decide if the pseudo-element is either before or after (before is the default) *** //\r\n\r\n@mixin pseudo-element\r\n(\r\n    $loc: before, \r\n    $cont: '',\r\n    $pos: absolute,\r\n    $inset: false,\r\n    $top: 0,\r\n    $bottom: 0,\r\n    $left: 0,\r\n    $right: 0\r\n) \r\n{\r\n    position: relative;\r\n    &::#{$loc} {\r\n        content: $cont;\r\n        position: $pos;\r\n        @if $inset {\r\n            inset: $inset;\r\n        } @else if $inset == false {\r\n            inset: $top $right $bottom $left;\r\n        }\r\n        @content;\r\n    }\r\n}\r\n\r\n//************************\r\n//* SUPPORT\r\n//************************ \r\n\r\n// *** NOTES *** // \r\n\r\n// *** By default, if you don't give any true value to the \"support\" argument, the mixin will print within the code the 4 most used prefixes (from my pov) *** //\r\n\r\n// *** Otherwise if you give to the \"support\" argument a true value, you're able to write your own prefixes *** //\r\n\r\n// *** To write your own prefixes, you should create arguments with prefixes as values (e.g. $chrm: 'webkit', the key name of the argument nevermind, it's needed only because without it it's impossible to parse it with @each) that way the mixin won't print unnecessary prefixes *** //\r\n\r\n// *** If you write your own prefix without specifying it with the \"support\" argument (by giving it a true value as I mentioned before), SASS is gonna stop compilating and it'll show you an error *** //\r\n\r\n@mixin support\r\n(\r\n    $property: false, \r\n    $value: false, \r\n    $support: false,\r\n    $args...\r\n) \r\n{\r\n    #{$property}: $value;\r\n    @supports not (#{$property}: $value) {\r\n        #{$property}: $value; \r\n        @if $support {\r\n            @each $key, $prefix in meta.keywords($args) {\r\n                -#{$prefix}-#{$property}: $value;\r\n            }\r\n        } @else if $support != true {\r\n            -webkit-#{$property}: $value;\r\n            -moz-#{$property}: $value;\r\n            -ms-#{$property}: $value;\r\n            -o-#{$property}: $value;\r\n        }\r\n    }\r\n}\r\n\r\n//************************\r\n//* SHADOW\r\n//************************\r\n\r\n// *** NOTES *** // \r\n\r\n// *** Using this mixin allows you to be more specific about where a value belongs to (e.g. by specifying the \"x\" or \"y\" axis with the arguments' names) * ** //\r\n\r\n// *** I didn't find any way how I could give the opportunity to the user of putting more than one shadow (I'll work on that) *** // \r\n\r\n@mixin shadow\r\n(\r\n    $type: box,\r\n    $x-axis: 0, \r\n    $y-axis: 0, \r\n    $blur: 0, \r\n    $spread: 0, \r\n    $color: #000, \r\n) \r\n{\r\n    @if $type == 'box' {\r\n        #{$type}-shadow: $x-axis $y-axis $blur $spread $color;\r\n    } @else if $type == 'text' {\r\n        #{$type}-shadow: $x-axis $y-axis $blur $color;\r\n    } @else {\r\n        @error '#{$type} is an unknown value, try using either box or text for creating shadows';\r\n    }\r\n}\r\n\r\n//************************\r\n//* MEDIA QUERIES\r\n//************************\r\n\r\n// *** NOTES *** // \r\n\r\n// *** You can choose among the different default sizes I've already created (or if you want, you can either modify or create your own screen resolutions for the media queries just by changing either the key, the value, or both once you import this stylesheet). You can also modify the key devices as well *** //\r\n\r\n// *** You can decide what'll be the query's criteria for the breakpoint (min-width, max-width, min-height, or max-height) just by writing the rule in the type's argument (min-width is the default) *** //\r\n\r\n// *** I didn't find a way to let the mixin detects when the user puts an unknown value, the mixin only detects when the user doesn't put a value and leave the size variable empty *** //\r\n\r\n// *** AVAILABLES SIZES *** //\r\n\r\n// *** I've assigned a key for each kinda device to be more specific and then I added the different screen sizes that could fit there with keywords like \"small\", \"medium\", and \"big\" as keys, but you can add more devices and screen sizes if you want *** //\r\n\r\n// 1   > > >   480px \r\n\r\n// 2   > > >   552px \r\n\r\n// 3   > > >   768px\r\n\r\n// 4   > > >   919px\r\n\r\n// 5   > > >   1080px\r\n\r\n// 6   > > >   1212px\r\n\r\n$screen-sizes: \r\n(\r\n    'smartphone': (\r\n        'sm': 480px,\r\n        'md': 552px,\r\n        'lg': 622px\r\n    ),\r\n    'tablet': (\r\n        'sm': 768px,\r\n        'md': 912px,\r\n        'lg': 1080px\r\n    ),\r\n    'desktop': (\r\n        'sm': 1212px,\r\n    )\r\n);\r\n\r\n@mixin query\r\n(\r\n    $type: min-width, \r\n    $device: false, \r\n    $size: false\r\n) \r\n{\r\n    $screen: map.get($screen-sizes, $device, $size); \r\n    @media (#{$type}: $screen) { @content; }\r\n\r\n    @if $device == false { \r\n        @error 'You have not given an available device value for your media query yet'; \r\n    } @else if $size == false {\r\n        @error 'You have not given an available screen size for your media query yet';\r\n    }\r\n}\r\n\r\n//************************\r\n//* BOX-MODEL\r\n//************************\r\n\r\n// *** NOTES *** //\r\n\r\n// *** You just have to call this mixin within the \"html\" and \"*\" selectors and the mixin itself it's gonna do the rest *** // \r\n\r\n// *** The mixin automatically detects when it's located within an \"html\" or \"*\" selector and then runs, if it's not located there it's gonna show you an error telling you that you should use this mixin inside the selectors mentioned before *** //\r\n\r\n@mixin box() {\r\n    $selector: selector.parse(&);\r\n    $parent-1: selector.parse('html');\r\n    $parent-2: selector.parse('*');\r\n\r\n    @if $parent-1 == $selector {\r\n        box-sizing: border-box;\r\n    } @else if $parent-2 == $selector {\r\n        &,\r\n        &::before,\r\n        &::after { box-sizing: inherit; }\r\n    } @else {\r\n        @error 'You are trying to parse this mixin within a selector that is neither #{$parent-1} or #{$parent-2}';\r\n    }\r\n}\r\n\r\n//************************\r\n//* COMING SOON...\r\n//************************","//********************************* \r\n//* MIXINS\r\n//*********************************\r\n@mixin background($device: 'mobile') {\r\n    background-image: \r\n            url('https://said-alrove.github.io/social-proof-section-sass/assets/svg/bg-pattern-top-#{$device}.svg'),\r\n            url('https://said-alrove.github.io/social-proof-section-sass/assets/svg/bg-pattern-bottom-#{$device}.svg');\r\n}","@use '../theme' as thm;\r\n\r\n//********************************* \r\n//* UTILITIES \r\n//*********************************\r\n.wrapper {\r\n    margin-block-start: 6rem;\r\n    margin-inline: auto;\r\n    min-inline-size: 30rem;\r\n    padding-inline: 2rem;\r\n    @include thm.less-query($device: 'tablet', $size: 'sm') {\r\n        margin-block-start: 8rem;\r\n        padding-inline: 4em;\r\n    }\r\n    @include thm.less-query($device: 'tablet', $size: 'lg') {\r\n        @include thm.less-grid($rows: repeat(2, auto), $cols: 2fr 3fr, $col-gap: 5rem);\r\n        max-inline-size: min(130rem, 80vw);\r\n        padding: 0;\r\n    }\r\n    @include thm.less-query($device: 'desktop', $size: 'sm') {\r\n        @include thm.less-grid($cols: 4fr 5fr, $gap: 5rem);\r\n    }\r\n}","@use '../theme' as thm;\r\n@use 'sass:map';\r\n\r\n//********************************* \r\n//* INFORMATION-CONTAINER \r\n//*********************************\r\n.information-container {\r\n    text-align: center;\r\n    @include thm.less-query($device: 'tablet', $size: 'lg') {\r\n        @include thm.less-flexbox($dir: column);\r\n        text-align: initial;\r\n    }\r\n\r\n    @at-root {\r\n        .information {\r\n            $_mg-block: 2.25rem;\r\n            &__heading > h1 {\r\n                margin-block: $_mg-block;\r\n                font-size: 3rem;\r\n                color: map.get(thm.$clr, 'magenta-300');\r\n                @include thm.less-query($device: 'tablet', $size: 'lg') {\r\n                    $_mg-block: 4.5rem 3rem;\r\n                    margin-block: $_mg-block;\r\n                    font-size: 4rem;\r\n                }\r\n                @include thm.less-query($device: 'desktop', $size: 'sm') {\r\n                    margin: 4rem auto 2rem;\r\n                    padding-inline-end: 5rem;\r\n                    font-size: 4.6rem;\r\n                }\r\n            }\r\n\r\n            &__paragraph > p {\r\n                margin-block: $_mg-block;\r\n                font: {\r\n                    size: 1.45rem;\r\n                    weight: 500;\r\n                }\r\n                color: map.get(thm.$clr, 'magenta-200');\r\n                @include thm.less-query($device: 'tablet', $size: 'lg') {\r\n                    $_mg-block: .5rem;\r\n                    margin-block: $_mg-block;\r\n                }\r\n                @include thm.less-query($device: 'desktop', $size: 'sm') {\r\n                    margin-block: 0;\r\n                    font-size: 1.75rem;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","@use '../theme' as thm;\r\n@use 'sass:map';\r\n\r\n//********************************* \r\n//* RATE-CONTAINER\r\n//*********************************\r\n.rate-container {\r\n    margin: 2.75rem auto;\r\n    text-align: center;\r\n    @include thm.less-query($device: 'tablet', $size: 'lg') {\r\n        inline-size: 85%;\r\n    }\r\n\r\n    @at-root {\r\n        .rate {\r\n            &__stars {\r\n                display: inline-block;\r\n                margin-block: 1.65rem;\r\n                border-radius: .5em;\r\n                inline-size: 100%;\r\n                background-color: map.get(thm.$clr, 'magenta-100');\r\n                @include thm.less-query($device: 'tablet', $size: 'lg') {\r\n                    &:nth-child(2) { margin-inline-start: 7.5%; }\r\n\r\n                    &:nth-child(3) { margin-inline-start: 15%; }\r\n                }\r\n                @include thm.less-query($device: 'desktop', $size: 'sm') {\r\n                    @include thm.less-flexbox();\r\n                    padding: 2rem;\r\n                }\r\n            }\r\n\r\n            &__heading {\r\n                margin-block: .6rem 1.2rem;\r\n                padding-inline: 2.2rem;\r\n                @include thm.less-query($device: 'desktop', $size: 'sm') {\r\n                    margin: 0;\r\n                    padding-inline: 0; \r\n                }\r\n            }\r\n\r\n            &__heading > h2 {\r\n                font-size: 1.4rem;\r\n                color: map.get(thm.$clr, 'magenta-300');\r\n                @include thm.less-query($device: 'tablet', $size: 'sm') {\r\n                    font-size: 1.6rem;\r\n                }\r\n            }\r\n        }\r\n\r\n        .stars-container {\r\n            display: inline-block;\r\n            margin-block: 1.2rem .6rem; \r\n            inline-size: 40%;\r\n            @include thm.less-query($device: 'desktop', $size: 'sm') {\r\n                margin: 0 3%;\r\n                inline-size: 30%;\r\n            }\r\n\r\n            > figure {\r\n                @include thm.less-flexbox($jt-content: space-between, $al-items: center);\r\n                block-size: 100%;\r\n            }\r\n\r\n            [alt=\"Star icon\"] {\r\n                max-inline-size: 1.75rem;\r\n                max-block-size: 1.75rem;\r\n            }\r\n        }\r\n    }\r\n}","@use '../theme' as thm;\r\n@use 'sass:map';\r\n\r\n//********************************* \r\n//* TESTIMONIALS-CONTAINER\r\n//*********************************\r\n.testimonials-container {\r\n    @include thm.less-query($device: 'tablet', $size: 'sm') {\r\n        @include thm.less-flexbox($wrap: wrap);\r\n    }\r\n    @include thm.less-query($device: 'tablet', $size: 'lg') {\r\n        grid-column: 1 / -1;\r\n    }\r\n    @include thm.less-query($device: 'desktop', $size: 'sm') {\r\n        @include thm.less-flexbox($jt-content: center, $al-items: flex-start);\r\n    }\r\n\r\n    @at-root {\r\n        .testimonials {\r\n            &__box {\r\n                margin-block: 2rem;\r\n                padding: 2.4rem;\r\n                font-size: 1.45rem;\r\n                border-radius: .5em;\r\n                background-color: map.get(thm.$clr, 'magenta-300');\r\n                @include thm.less-query($device: 'tablet', $size: 'sm') {\r\n                    flex-basis: 45%;\r\n                    margin-inline: auto;\r\n                }\r\n                @include thm.less-query($device: 'desktop', $size: 'sm') {\r\n                    flex-basis: 30%;\r\n                }\r\n\r\n                &:nth-child(2) {\r\n                    @include thm.less-query($device: 'desktop', $size: 'sm') {\r\n                        margin-block-start: 6vh;\r\n                    }\r\n                }\r\n\r\n                &:nth-child(3) {\r\n                    @include thm.less-query($device: 'desktop', $size: 'sm') {\r\n                        margin-block-start: 12vh;\r\n                    }\r\n                }\r\n            }\r\n\r\n            &__flex {\r\n                @include thm.less-flexbox();\r\n            }\r\n\r\n            &__user {\r\n                > img {\r\n                    margin-inline-end: 2.8rem;\r\n                    inline-size: 5.5rem;\r\n                    border-radius: 50%;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//********************************* \r\n//* TESTIMONIALS__INFORMATION\r\n//*********************************\r\n.testimonials {\r\n    &__information {\r\n        @include thm.less-flexbox($dir: column, $jt-content: center);\r\n\r\n        > span { margin: .2rem auto; }\r\n    }\r\n\r\n    @at-root {\r\n        .information {\r\n            &__name {\r\n                font-weight: 700;\r\n                color: map.get(thm.$clr, 'white');\r\n            }\r\n\r\n            &__verified {\r\n                font-weight: 400;\r\n                color: map.get(thm.$clr, 'pink-100');\r\n            }\r\n        }\r\n    }\r\n\r\n    &__comment > p {\r\n        margin-block-start: 2.4rem;\r\n        line-height: 1.5;\r\n        color: map.get(thm.$clr, 'magenta-100');\r\n    }\r\n}","@use '../theme' as thm;\r\n@use 'sass:map';\r\n\r\n//********************************* \r\n//* ATTRIBUTION\r\n//*********************************\r\n.attribution {\r\n    margin: 1rem auto;\r\n    font-size: 1.4rem;\r\n    text-align: center;\r\n\r\n    @at-root {\r\n        &__text > a {\r\n            color: map.get(thm.$clr, 'magenta-200');\r\n        }\r\n    }\r\n}","@use '../theme' as thm;\r\n@use 'sass:map';\r\n@use 'sass:color';\r\n\r\n//********************************* \r\n//* STATES \r\n//*********************************\r\n\r\n//********************************* \r\n//* RATE-CONTAINER \r\n//*********************************\r\n.rate-container {\r\n    @at-root {\r\n        .rate {\r\n            &__stars {\r\n                transition: all 300ms ease-in-out;\r\n\r\n                &:hover { background-color: map.get(thm.$clr, 'gray-100'); }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//********************************* \r\n//* TESTIMONIALS-CONTAINER \r\n//*********************************\r\n.testimonials-container {\r\n    @include thm.less-query($device: 'tablet', $size: 'sm') {\r\n        @include thm.less-flexbox($wrap: wrap);\r\n    }\r\n    @include thm.less-query($device: 'tablet', $size: 'lg') {\r\n        grid-column: 1 / -1;\r\n    }\r\n    @include thm.less-query($device: 'desktop', $size: 'sm') {\r\n        @include thm.less-flexbox($jt-content: center, $al-items: flex-start);\r\n    }\r\n\r\n    @at-root {\r\n        .testimonials {\r\n            &__box {\r\n                transition: all 500ms ease-in-out;\r\n                &:hover {\r\n                    transform: translateY(-15%);\r\n                    @include thm.less-shadow\r\n                    (\r\n                        $type: box, \r\n                        $y-axis: 2.5rem, \r\n                        $blur: 3rem, \r\n                        $color: color.change(map.get(thm.$clr, 'magenta-300'), $alpha: .4)\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//********************************* \r\n//* ATTRIBUTION \r\n//*********************************\r\n.attribution {\r\n    @at-root {\r\n        &__text > a {\r\n            transition: all 300ms ease-in-out;\r\n\r\n            &:hover { color: map.get(thm.$clr, 'magenta-300'); }\r\n        }\r\n    }\r\n}"]}